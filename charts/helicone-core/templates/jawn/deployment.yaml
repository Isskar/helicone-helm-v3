{{- if .Values.helicone.jawn.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "jawn.name" . }}
  labels:
    {{- include "helicone.labels" . | nindent 4 }}
  annotations:
    {{- include "helicone.annotations" . | nindent 4 }}
spec:
  replicas: {{ .Values.helicone.jawn.replicaCount }}
  selector:
    matchLabels:
      {{- include "helicone.jawn.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "helicone.jawn.selectorLabels" . | nindent 8 }}
    spec:
      {{- if and .Values.helicone.s3 .Values.helicone.s3.serviceAccount .Values.helicone.s3.serviceAccount.enabled }}
      serviceAccountName: {{ include "jawn.name" . }}
      {{- end }}
      initContainers:
        {{- if .Values.helicone.cloudSqlProxy.enabled }}
        - name: cloud-sql-proxy
          image: {{ include "helicone.cloudSqlProxy.image" . }}
          imagePullPolicy: {{ .Values.helicone.cloudSqlProxy.image.pullPolicy }}
          args: {{- include "helicone.cloudSqlProxy.args" . | nindent 12 }}
          ports:
            - name: sql-proxy
              containerPort: {{ include "helicone.cloudSqlProxy.port" . }}
              protocol: TCP
          {{- if not .Values.helicone.cloudSqlProxy.useWorkloadIdentity }}
          volumeMounts:
            - name: cloudsql-key
              mountPath: /secrets/cloudsql
              readOnly: true
          {{- end }}
          env:
            - name: CSQL_PROXY_HEALTH_CHECK
              value: "true"
            - name: CSQL_PROXY_HTTP_PORT
              value: "9801"
            - name: CSQL_PROXY_HTTP_ADDRESS
              value: 0.0.0.0
          restartPolicy: Always
          {{- with .Values.helicone.cloudSqlProxy.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          startupProbe:
            httpGet:
              path: /startup
              port: 9801
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 6
        {{- end }}
        - name: wait-for-postgres
          image: postgres:15-alpine
          command:
            - sh
            - -c
            - |
              echo "Waiting for PostgreSQL to be ready..."
              {{- if .Values.helicone.cloudSqlProxy.enabled }}
              until pg_isready -h localhost -p {{ include "helicone.cloudSqlProxy.port" . }} -U $(DB_USER); do
              {{- else }}
              until pg_isready -h $DB_HOST -p $DB_PORT -U $DB_USER; do
              {{- end }}
                echo "PostgreSQL is not ready yet. Waiting..."
                sleep 2
              done
              echo "PostgreSQL is ready!"
          env:
            {{- if not .Values.helicone.cloudSqlProxy.enabled }}
            {{- include "helicone.env.dbHost" . | nindent 12 }}
            {{- include "helicone.env.dbPort" . | nindent 12 }}
            {{- end }}
            {{- include "helicone.env.dbUser" . | nindent 12 }}
            {{- include "helicone.env.dbPassword" . | nindent 12 }}
        {{- if .Values.helicone.minio.enabled }}
        - name: wait-for-minio
          image: minio/mc:latest
          command:
            - sh
            - -c
            - |
              echo "Waiting for MinIO to be ready..."
              until mc alias set localminio http://{{ include "minio.name" . }}:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD}; do
                echo "MinIO is not ready yet. Waiting..."
                sleep 2
              done
              echo "MinIO is ready!"
          env:
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: helicone-secrets
                  key: minio-root-user
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: helicone-secrets
                  key: minio-root-password
        {{- end }}
        {{- if .Values.helicone.clickhouse.enabled }}
        - name: wait-for-clickhouse
          image: curlimages/curl:latest
          command:
            - sh
            - -c
            - |
              echo "Waiting for ClickHouse to be ready..."
              until curl -sSf http://{{ include "clickhouse.name" . }}:8123/ping; do
                echo "ClickHouse is not ready yet. Waiting..."
                sleep 2
              done
              echo "ClickHouse is ready!"
        {{- end }}
        - name: migration-runner
          image: "{{ .Values.helicone.migrationRunner.image.repository }}:{{ .Values.helicone.migrationRunner.image.tag }}"
          imagePullPolicy: IfNotPresent
          command: ["sh", "-c"]
          args: ["find / -name 'run_migrations.sh' 2>/dev/null | head -1 | xargs -I {} sed -i 's/--upgrade --no-password/--upgrade --no-password --skip-confirmation/g' {} && find / -name 'run_migrations.sh' 2>/dev/null | head -1 | xargs -I {} sh {}"]
          {{- with .Values.helicone.migrationRunner.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          env:
            {{- include "helicone.env.flywayUrl" . | nindent 12 }}
            {{- include "helicone.env.flywayUser" . | nindent 12 }}
            {{- include "helicone.env.flywayPassword" . | nindent 12 }}
            {{- include "helicone.env.clickhouseUrl" . | nindent 12 }}
            {{- include "helicone.env.clickhouseUser" . | nindent 12 }}
            {{- include "helicone.env.clickhousePassword" . | nindent 12 }}
      containers:
        - name: {{ include "jawn.name" $ }}
          image: "{{ .Values.helicone.jawn.image.repository }}:{{ .Values.helicone.jawn.image.tag }}"
          imagePullPolicy: {{ .Values.helicone.jawn.image.pullPolicy }}
          command: ["yarn", "serve"]
          env:
            {{- include "helicone.jawn.env" . | nindent 12 }}
            {{- with .Values.helicone.jawn.extraEnvVars }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.helicone.jawn.service.port }}
              protocol: TCP
          {{- with .Values.helicone.jawn.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: http
            initialDelaySeconds: 15
            periodSeconds: 10
            failureThreshold: 4
      {{- if and .Values.helicone.cloudSqlProxy.enabled (not .Values.helicone.cloudSqlProxy.useWorkloadIdentity) }}
      volumes:
        - name: cloudsql-key
          secret:
            secretName: {{ .Values.helicone.cloudSqlProxy.serviceAccountSecretName }}
            items:
              - key: {{ .Values.helicone.cloudSqlProxy.serviceAccountSecretKey }}
                path: key.json
      {{- end }}

{{- end }}
